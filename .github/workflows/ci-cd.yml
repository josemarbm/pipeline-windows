name: CI-CD-HelloWorld

on:
  workflow_dispatch:
  push:
    branches: ["main"]

permissions:
  contents: write  # Permissão para criar releases e modificar conteúdo do repositório

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Instalar .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restaurar Dependências
        run: dotnet restore HelloWorld.csproj

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'hello-world-exe'
          path: '.'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports   

      - name: Configurar SonarCloud
        run: echo "Sonar Analyst"
      #   uses: sonarsource/sonarcloud-github-action@v2
      #   with:
      #     organization: "seu-usuario-ou-organizacao"  # Substitua com sua organização no SonarCloud
      #     projectKey: "seu-projeto-chave"  # Substitua com a chave do seu projeto no SonarCloud
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Defina o token do SonarCloud como um secret no GitHub

      # - name: Rodar Análise do SonarCloud
      #   run: dotnet build HelloWorld.csproj /p:Configuration=Release

      - name: Rodar Testes Unitários
        run: echo  "Run test" # dotnet test HelloWorld.Tests/HelloWorld.Tests.csproj --logger "trx"  # Executa os testes

      - name: Compilar Aplicação
        run: dotnet publish HelloWorld.csproj -c Release -r win-x64 --self-contained true -o out


      - name: Armazenar Artefato
        uses: actions/upload-artifact@v4
        with:
          name: hello-world-exe
          path: out/
      - name: Lista arquivos
        run: ls -lha out/         

  Release:
    runs-on: ubuntu-latest
    needs: [CI]

    steps:
      - name: Checkout do Código
        uses: actions/checkout@v4

      - name: Determinar Versão com Codacy/Git-Version
        id: version
        uses: codacy/git-version@2.7.1
        with:
          prefix: "v"

      - name: Baixar Artefato
        uses: actions/download-artifact@v4
        with:
          name: hello-world-exe  # Nome correto do artefato

      - name: Criar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: out/*  # Incluindo os arquivos .exe no release
          
  CD:
    runs-on: ubuntu-latest
    needs: [Release]

    steps:
      - name: Baixar Artefato
        uses: actions/download-artifact@v4
        with:
          name: hello-world-exe  # Nome correto do artefato

      - name: Instalar Ferramentas WinRM
        run: sudo apt-get install -y python3-pip && pip3 install pywinrm

      - name: Copiar Arquivos para VM Windows
        run: |
          echo "Copiando para VM Windows"
        #  python3 -m winrm.cli -host ${{ secrets.WINDOWS_HOST }} -username ${{ secrets.WINDOWS_USER }} -password ${{ secrets.WINDOWS_PASS }} -script "winrmcp -src app.zip -dest C:\Deploy\app.zip"

      - name: Executar Deploy na VM
        run: |
          echo "Deploy em VM Windows"
         # python3 -m winrm.cli -host ${{ secrets.WINDOWS_HOST }} -username ${{ secrets.WINDOWS_USER }} -password ${{ secrets.WINDOWS_PASS }} -script "powershell Expand-Archive -Path C:\Deploy\app.zip -DestinationPath C:\Deploy\app && Start-Process -NoNewWindow -FilePath 'C:\Deploy\app\seu-executavel.exe'"
